<channel version="3.9.0">
  <id>a25c03d6-3b28-495b-a3ed-0015c923e19f</id>
  <nextMetaDataId>8</nextMetaDataId>
  <name>FHIR Resource Loader</name>
  <description>NOTE: This channel depends on the following variables being declared in the configuration map:

    fhirDBDatabaseType: The type of database server (postgres, sqlserver).
    fhirDBDriver: The JDBC Driver class to use when connecting to the FHIR database.
    fhirDBUrl: The JDBC connection URL to use when connecting to the FHIR database.
    fhirDBUsername: The username to use when connecting to the FHIR database.
    fhirDBPassword: The password to use when connecting to the FHIR database.
    fhirDBMaxRetries: The maximum amount of retry attempts when a database connection fails.</description>
  <revision>2</revision>
  <sourceConnector version="3.9.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.fhir.shared.FhirReceiverProperties" version="3.9.0">
      <pluginProperties>
        <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="3.9.0">
  <enabled>false</enabled>
          <clientAuthentication>DISABLED</clientAuthentication>
          <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
          <trustAllCertificates>false</trustAllCertificates>
          <trustedCertificates>
    <trustedCertificateAliases/>
            <trustCACerts>true</trustCACerts>
          </trustedCertificates>
          <localCertificateAlias/>
          <ocspEnabled>false</ocspEnabled>
          <ocspURI/>
          <ocspHardFail>false</ocspHardFail>
          <crlEnabled>false</crlEnabled>
          <crlURI/>
          <crlHardFail>false</crlHardFail>
          <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
          <trustedSubjectDNs class="linked-hash-map"/>
          <hideIssuerDNs>false</hideIssuerDNs>
          <allowExpiredCertificates>false</allowExpiredCertificates>
          <implicitFTPS>true</implicitFTPS>
          <useSTARTTLS>false</useSTARTTLS>
        </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
        <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="3.9.0">
  <authType>NONE</authType>
        </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
      </pluginProperties>
      <listenerConnectorProperties version="3.9.0">
        <host>0.0.0.0</host>
        <port>9050</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="3.9.0">
        <responseVariable>response</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <contextPath></contextPath>
      <timeout>0</timeout>
      <conformanceTemplate></conformanceTemplate>
      <conformanceURL></conformanceURL>
      <conformanceName>Mirth Connect FHIR Server</conformanceName>
      <supportsXML>true</supportsXML>
      <supportsJSON>true</supportsJSON>
      <systemInteractions>
        <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_SYSTEM</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
        <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_SYSTEM</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
      </systemInteractions>
      <resourceProperties>
        <disabledInteractions>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>EXPANSION_PROFILE</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>ELIGIBILITY_RESPONSE</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>IMAGING_MANIFEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>SERVICE_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>PROCESS_REQUEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>BODY_SITE</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>PROCESS_RESPONSE</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>REFERRAL_REQUEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>DEVICE_COMPONENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>SEQUENCE</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>DATA_ELEMENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>PROCEDURE_REQUEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>ELIGIBILITY_REQUEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
        </disabledInteractions>
      </resourceProperties>
      <fhirVersion>R4</fhirVersion>
    </properties>
    <transformer version="3.9.0">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.0">
          <name>Filter destinations by FHIR interaction</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>var interaction = sourceMap.get(&apos;fhirInteraction&apos;);

if (interaction == &apos;operation&apos;) {
	// Operation destinations will have a name of &quot;$name&quot;.
	destinationSet.removeAllExcept([sourceMap.get(&apos;fhirOperationName&apos;)]);
} else if (interaction.startsWith(&apos;history&apos;)) {
	// This will match history-system, history-type, and history-instance
	destinationSet.removeAllExcept([&apos;history&apos;]);
} else if (interaction.startsWith(&apos;search&apos;)) {
	// This will match search-system and search-type
	destinationSet.removeAllExcept([&apos;search&apos;]);
} else {
	// All other destinations should have a name equal to the interaction
	destinationSet.removeAllExcept([interaction]);
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.mapper.MapperStep version="3.9.0">
          <name>fhirVersion</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <variable>fhirVersion</variable>
          <mapping>&apos;R4&apos;</mapping>
          <defaultValue></defaultValue>
          <replacements/>
          <scope>CHANNEL</scope>
        </com.mirth.connect.plugins.mapper.MapperStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>FHIR</inboundDataType>
      <outboundDataType>FHIR</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
          <serializationType>XML</serializationType>
          <fhirVersion>R4</fhirVersion>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
          <serializationType>JSON</serializationType>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
          <serializationType>XML</serializationType>
          <fhirVersion>R4</fhirVersion>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
          <serializationType>XML</serializationType>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.9.0">
      <elements/>
    </filter>
    <transportName>FHIR Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.9.0">
      <metaDataId>1</metaDataId>
      <name>create</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
    var fhirVersion = $(&apos;fhirVersion&apos;);
    var type = $(&apos;fhirType&apos;).toLowerCase();
    var id = UUIDGenerator.getUUID();
    var versionId = 1;
    var data = AttachmentUtil.reAttachMessage(connectorMessage);
    var contentType = FhirUtil.getMIMETypeXML();
    var preferReturn = getPreferValue();

    var resource = FhirUtil.fromXML(data, fhirVersion);
    var resourceType = resource.getResourceType();
    var resourceId = resource.getId();
    
    if (resourceId != null &amp;&amp; resourceId.length() &gt; 0) {
    	   id = resourceId.substring(resourceType.toString().length() + 1, resourceId.length());
    }

    if (resourceType == null) {
        return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Resource type unknown, cannot be created as a(n) &apos; + $(&apos;fhirType&apos;) + &apos; resource.&apos;, fhirVersion);
    } else if (resourceType.toString().toLowerCase() != type) {
        return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Resource type &apos; + resourceType + &apos; cannot be created as a(n) &apos; + $(&apos;fhirType&apos;) + &apos; resource.&apos;, fhirVersion);
    }

    var lastUpdated = updateResourceMeta(resource, id, versionId);

    data = FhirUtil.toXML(resource, fhirVersion).replaceAll(&apos;\\s*xmlns:?[^=]*\\s*=\\s*&quot;http://hl7.org/fhir&quot;&apos;, &apos;&apos;);

    insertFhirResource(type, id, versionId, lastUpdated, data, contentType, $(&apos;method&apos;), $(&apos;url&apos;));

    var response;
    if (preferReturn == &apos;minimal&apos; || (!preferReturn &amp;&amp; type == &apos;binary&apos;)) {
        // If the Prefer header is set to minimal then don&apos;t send back the created resource
        response = FhirResponseFactory.getCreateResponse(id, versionId, lastUpdated, 201);
        if (preferReturn == &apos;minimal&apos;) {
            response.addHeader(&apos;Preference-Applied&apos;, &apos;return=minimal&apos;);
        }
    } else {
        response = FhirResponseFactory.getCreateResponse(data, id, versionId, lastUpdated, 201, contentType);
        if (preferReturn == &apos;representation&apos;) {
            response.addHeader(&apos;Preference-Applied&apos;, &apos;return=representation&apos;);
        }
    }
    
    responseMap.put(&apos;response&apos;, response);
    return response.getMessage();
} catch (e) {
    return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error creating resource.&apos;, fhirVersion, 500, e);
}</script>
      </properties>
      <transformer version="3.9.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.0">
      <metaDataId>2</metaDataId>
      <name>update</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
    var fhirVersion = $(&apos;fhirVersion&apos;);
    var type = $(&apos;fhirType&apos;).toLowerCase();
    var id = $(&apos;fhirId&apos;);
    var data = AttachmentUtil.reAttachMessage(connectorMessage);
    var contentType = FhirUtil.getMIMETypeXML();
    var responseCode = 201;
    var preferReturn = getPreferValue();

    var resource = FhirUtil.fromXML(data, fhirVersion);
    var resourceType = resource.getResourceType();

    if (resourceType == null) {
        return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Resource type unknown, cannot be updated as a(n) &apos; + $(&apos;fhirType&apos;) + &apos; resource.&apos;, fhirVersion);
    } else if (resourceType.toString().toLowerCase() != type) {
        return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Resource type &apos; + resourceIdElement.getResourceType() + &apos; cannot be updated as a(n) &apos; + $(&apos;fhirType&apos;) + &apos; resource.&apos;, fhirVersion);
    }

    var versionId = getFhirVersion(type, id) + 1;
    if (versionId &gt; 1) {
        responseCode = 200;
    }

    var lastUpdated = updateResourceMeta(resource, id, versionId);
    
    data = FhirUtil.toXML(resource, fhirVersion).replaceAll(&apos;\\s*xmlns:?[^=]*\\s*=\\s*&quot;http://hl7.org/fhir&quot;&apos;, &apos;&apos;);

    insertFhirResource(type, id, versionId, lastUpdated, data, contentType, $(&apos;method&apos;), $(&apos;url&apos;));

    var response;
    if (preferReturn == &apos;minimal&apos; || (!preferReturn &amp;&amp; type == &apos;binary&apos;)) {
        // If the Prefer header is set to minimal then don&apos;t send back the created resource
        response = FhirResponseFactory.getUpdateResponse(versionId, lastUpdated, responseCode);
        if (preferReturn == &apos;minimal&apos;) {
            response.addHeader(&apos;Preference-Applied&apos;, &apos;return=minimal&apos;);
        }
    } else {
        response = FhirResponseFactory.getUpdateResponse(data, versionId, lastUpdated, responseCode, contentType);
        if (preferReturn == &apos;representation&apos;) {
            response.addHeader(&apos;Preference-Applied&apos;, &apos;return=representation&apos;);
        }
    }
    responseMap.put(&apos;response&apos;, response);
    return response.getMessage();
} catch (e) {
    return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error updating resource.&apos;, fhirVersion, 500, e);
}</script>
      </properties>
      <transformer version="3.9.0">
        <elements/>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.0">
      <metaDataId>3</metaDataId>
      <name>delete</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
    var fhirVersion = $(&apos;fhirVersion&apos;);
    var type = $(&apos;fhirType&apos;).toLowerCase();
    var id = $(&apos;fhirId&apos;);

    var result = getFhirVersionAndDeleted(type, id);
    var response;
    
    if (result.next() &amp;&amp; !result.getBoolean(&apos;deleted&apos;)) {
        var versionId = result.getInt(&apos;version&apos;) + 1;
        var lastUpdated = new java.util.Date();
        var sequenceId = insertFhirDeletedResource(type, id, versionId, lastUpdated, $(&apos;method&apos;), $(&apos;url&apos;));
        response = FhirResponseFactory.getDeleteResponse(versionId, lastUpdated, 204);
    } else {
        response = FhirResponseFactory.getDeleteResponse(null, null, 200);
    }

    responseMap.put(&apos;response&apos;, response);
} catch (e) {
    return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error deleting resource.&apos;, fhirVersion, 500, e);
}</script>
      </properties>
      <transformer version="3.9.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.0">
      <metaDataId>4</metaDataId>
      <name>read</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
    var fhirVersion = $(&apos;fhirVersion&apos;);
    var type = $(&apos;fhirType&apos;).toLowerCase();
    var id = $(&apos;fhirId&apos;);
    
    var result = getResource(type, id);
    
    if (result.next()) {
        var version = new String(result.getInt(&apos;version&apos;));
        var data = getResultSetString(result, &apos;data&apos;);
        var contentType = getResultSetString(result, &apos;mimetype&apos;);
        var lastModified = getResultSetDate(result, &apos;last_modified&apos;);
        var deleted = result.getBoolean(&apos;deleted&apos;);

        if (deleted) {
            return createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, $(&apos;fhirType&apos;) + &apos; ID &apos; + id + &apos; has been deleted.&apos;, fhirVersion, 410);
        } else {
            var response = FhirResponseFactory.getReadResponse(data, version, lastModified, 200, contentType);
            responseMap.put(&apos;response&apos;, response);
            return response.getMessage();
        }
    } else {
        return createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, $(&apos;fhirType&apos;) + &apos; ID &apos; + id + &apos; not found.&apos;, fhirVersion, 404);
    }
} catch (e) {
    return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error reading resource.&apos;, fhirVersion, 500, e);
}</script>
      </properties>
      <transformer version="3.9.0">
        <elements/>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.0">
        <elements/>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.0">
      <metaDataId>5</metaDataId>
      <name>vread</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
    var fhirVersion = $(&apos;fhirVersion&apos;);
    var type = $(&apos;fhirType&apos;).toLowerCase();
    var id = $(&apos;fhirId&apos;);
    var versionId = $(&apos;fhirVid&apos;);
    
    var result = getResourceVersion(type, id, versionId);
    
    if (result.next()) {
        var data = getResultSetString(result, &apos;data&apos;);
        var contentType = getResultSetString(result, &apos;mimetype&apos;);
        var lastModified = getResultSetDate(result, &apos;last_modified&apos;);
        var deleted = result.getBoolean(&apos;deleted&apos;);

        if (deleted) {
            return createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, $(&apos;fhirType&apos;) + &apos; ID &apos; + id + &apos; at version &apos; + versionId + &apos; has been deleted.&apos;, fhirVersion, 410);
        } else {
            var response = FhirResponseFactory.getVreadResponse(data, lastModified, 200, contentType);
            responseMap.put(&apos;response&apos;, response);
            return response.getMessage();
        }
    } else {
        return createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, $(&apos;fhirType&apos;) + &apos; ID &apos; + id + &apos; at version &apos; + versionId + &apos; not found.&apos;, fhirVersion, 404);
    }
} catch (e) {
    return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error reading resource.&apos;, fhirVersion, 500, e);
}</script>
      </properties>
      <transformer version="3.9.0">
        <elements/>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.0">
        <elements/>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.0">
      <metaDataId>6</metaDataId>
      <name>history</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
    var fhirVersion = $(&apos;fhirVersion&apos;);
    var type = $(&apos;fhirType&apos;).toLowerCase();
    var id = $(&apos;fhirId&apos;);
    var requestURL = $(&apos;url&apos;);
    if (!requestURL.endsWith(&apos;/&apos;)) {
        requestURL += &apos;/&apos;;
    }
    var requestURL = new java.net.URI(requestURL);

    var _count = $(&apos;parameters&apos;).getParameter(&apos;_count&apos;);
    if (_count) {
        _count = parseInt(_count, 10);
        if (!_count) {
            return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Parameter _count formatted incorrectly: &apos; + $(&apos;parameters&apos;).getParameter(&apos;_count&apos;), fhirVersion);
        }
    }
    
    var _since = $(&apos;parameters&apos;).getParameter(&apos;_since&apos;);
    if (_since) {
        try {
            _since = convertDate(_since, &apos;yyyy-MM-dd HH:mm:ss.SSSZZ&apos;);
        } catch (e) {
            return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Parameter _since formatted incorrectly: &apos; + _since, fhirVersion);
        }
    }

    // Build up the WHERE clause and prepared query parameters
    var whereParts = [];
    var params = [];
    
    if (type &amp;&amp; id) {
        // history-instance
        whereParts.push(&quot;name = ?&quot;);
        whereParts.push(&quot;id = ?&quot;);
        params.push(type);
        params.push(id);
    } else if (type) {
        // history-type
        whereParts.push(&quot;name = ?&quot;);
        params.push(type);
    }

    if (_since) {
        whereParts.push(getFhirHistorySinceWherePart());
        params.push(_since);
    }

    // Build up the actual query
    var query = getFhirHistoryBaseQuery();
    if (whereParts.length &gt; 0) {
        query += &quot; WHERE &quot; + whereParts.join(&quot; AND &quot;);
    }
    query += &quot; ORDER BY name ASC, id ASC, version DESC&quot;;
    if (_count &gt; 0) {
        query += &quot; LIMIT &quot; + _count;
    }

    var result = executeCachedQuery(query, params);
    var bundle = new Packages.org.hl7.fhir.r4.model.Bundle().setType(Packages.org.hl7.fhir.r4.model.Bundle.BundleType.HISTORY);

    while (result.next()) {
        var entryType = getResultSetString(result, &apos;name&apos;);
        var entryId = getResultSetString(result, &apos;id&apos;);
        var entryVersion = result.getInt(&apos;version&apos;);
        var entryData = getResultSetString(result, &apos;data&apos;);
        var entryContentType = getResultSetString(result, &apos;mimetype&apos;);
        var entryDeleted = result.getBoolean(&apos;deleted&apos;);
        var entryRequestMethod = getResultSetString(result, &apos;request_method&apos;);
        var entryRequestURL = getResultSetString(result, &apos;request_url&apos;);
        
        var resourceType = FhirUtil.getResourceType(entryType, fhirVersion);
        if (resourceType != null) {
            entryType = resourceType.getPath();
        }

        var request = new Packages.org.hl7.fhir.r4.model.Bundle.BundleEntryRequestComponent().setMethod(new Packages.org.hl7.fhir.r4.model.Bundle.HTTPVerbEnumFactory().fromCode(entryRequestMethod)).setUrl(entryRequestURL);
        var entry = bundle.addEntry().setRequest(request);
        
        if (!entryDeleted) {
            var relativeUrl = &apos;../&apos;;
            if (id) {
                relativeUrl += &apos;../&apos;;
            }
            entry.setFullUrl(requestURL.resolve(relativeUrl + entryId + &apos;/_history/&apos; + entryVersion).toString());
            entry.setResource(FhirUtil.fromXML(entryData, fhirVersion));
        }
    }

    bundle.setTotal(bundle.getEntry().size());

    var response = FhirResponseFactory.getHistoryResponse(FhirUtil.toXML(bundle, &apos;R4&apos;), 200, FhirUtil.getMIMETypeXML());
    responseMap.put(&apos;response&apos;, response);
    return response.getMessage();
} catch (e) {
    return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error retrieving resource history.&apos;, fhirVersion, 500, e);
}</script>
      </properties>
      <transformer version="3.9.0">
        <elements/>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.0">
        <elements/>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>STU3</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>STU3</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.0">
      <metaDataId>7</metaDataId>
      <name>search</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
	var fhirVersion = $(&apos;fhirVersion&apos;);
	var type = $(&apos;fhirType&apos;).toLowerCase();
	var requestURL = $(&apos;url&apos;);
	if (!requestURL.endsWith(&apos;/&apos;)) {
		requestURL += &apos;/&apos;;
	}
	var requestURL = new java.net.URI(requestURL);

	// Add more supported parameters as you see fit
	var supportedParameters = [
		// General
		&apos;_format&apos;,
		// All resources
		&apos;_content&apos;,
		&apos;_id&apos;,
		&apos;_include&apos;,
		&apos;_lastupdated&apos;,
		// Results
		&apos;_count&apos;,
	]

	// Add more supported parameters as you see fit
	var supportedTypeParameters = {
		patient: [
			&apos;identifier&apos;,
			&apos;name&apos;,
			&apos;given&apos;,
			&apos;family&apos;
		],
		schedule: [
			&apos;identifier&apos;,
			&apos;actor&apos;
		],
		slot: [
			&apos;identifier&apos;,
			&apos;schedule&apos;
		],
		measure: [
			&apos;url&apos;,
			&apos;code&apos;,
			&apos;definition-text&apos;
		],
		measurereport: [
			&apos;date&apos;,
			&apos;evaluated-resource&apos;,
			&apos;identifier&apos;,
			&apos;measure&apos;,
			&apos;patient&apos;,
			&apos;period&apos;,
			&apos;reporter&apos;,
			&apos;status&apos;,
			&apos;subject&apos;,
			&apos;type&apos;,
			&apos;code&apos;
		],
		location: [
			&apos;identifier&apos;,
			&apos;name&apos;,
			&apos;address&apos;,
			&apos;address-city&apos;,
			&apos;address-country&apos;,
			&apos;address-postalcode&apos;,
			&apos;address-state&apos;,
			&apos;address-use&apos;
		]
	}

	if (type) {
		var typeParameters = supportedTypeParameters[type.toLowerCase()];
		if (typeParameters) {
			for each (param in typeParameters) {
				supportedParameters.push(param);
			}
		}
	}

	// Uncomment this to reject requests with parameters that aren&apos;t supported
//  for each (key in $(&apos;parameters&apos;).getKeys().toArray()) {
//      if (supportedParameters.indexOf(key.toLowerCase()+&apos;&apos;) &lt; 0) {
//          return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Unknown or unsupported parameter &apos; + key + &apos;.&apos;, fhirVersion);
//      }
//  }

	var _content = $(&apos;parameters&apos;).getParameter(&apos;_content&apos;);

	var _id = $(&apos;parameters&apos;).getParameter(&apos;_id&apos;);

	var _lastUpdated = $(&apos;parameters&apos;).getParameter(&apos;_lastUpdated&apos;);
	var lastUpdatedOperator = &apos;eq&apos;;
	if (_lastUpdated) {
		try {
			if (/^(eq|ne|gt|lt|ge|le|sa|eb|ap).*/.test(_lastUpdated)) {
				lastUpdatedOperator = _lastUpdated.substr(0, 2);
				_lastUpdated = _lastUpdated.substr(2);
			}
			_lastUpdated = convertDate(_lastUpdated, &apos;yyyy-MM-dd HH:mm:ss.SSSZZ&apos;);
		} catch (e) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Parameter _lastUpdated formatted incorrectly: &apos; + _lastUpdated, fhirVersion);
		}
	}

	var _includeList = $(&apos;parameters&apos;).getParameterList(&apos;_include&apos;);

	var _count = $(&apos;parameters&apos;).getParameter(&apos;_count&apos;);
	if (_count) {
		_count = parseInt(_count, 10);
		if (!_count) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Parameter _count formatted incorrectly: &apos; + $(&apos;parameters&apos;).getParameter(&apos;_count&apos;), fhirVersion);
		}
	}

	// Build up the WHERE clause and prepared query parameters
	var whereParts = [];
	var params = [];
	
	if (type) {
		// search-type
		whereParts.push(&quot;name = ?&quot;);
		params.push(type);
	}

	// Search on the entire content of the resource
	if (_content) {
		whereParts.push(getFhirSearchContentWherePart());
		params.push(&apos;%&apos; + _content + &apos;%&apos;);
	}

	// Logical id of the resource
	if (_id) {
		whereParts.push(&quot;id = ?&quot;);
		params.push(_id);
	}

	// When the resource version last changed
	if (_lastUpdated) {
		whereParts.push(getFhirSearchLastUpdatedWherePart(lastUpdatedOperator));
		params.push(_lastUpdated);
	}

	// Add resource-specific query expressions
	if (type == &apos;patient&apos;) {
		if ($(&apos;parameters&apos;).contains(&apos;identifier&apos;)) {
			addXPath(xpathSearch(&apos;/*/identifier&apos;, [&apos;value/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;identifier&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;name&apos;)) {
			addMultipleXPath([
				xpathSearch(&apos;/*/name/family&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;name&apos;)),
				xpathSearch(&apos;/*/name/given&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;name&apos;))
			], whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;family&apos;)) {
			addXPath(xpathSearch(&apos;/*/name&apos;, [&apos;family/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;family&apos;)), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;given&apos;)) {
			addXPath(xpathSearch(&apos;/*/name&apos;, [&apos;given/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;given&apos;)), whereParts, params);
		}
	} else if (type == &apos;schedule&apos;) {
		if ($(&apos;parameters&apos;).contains(&apos;identifier&apos;)) {
			addXPath(xpathSearch(&apos;/*/identifier&apos;, [&apos;value/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;identifier&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;actor&apos;)) {
			addXPath(xpathSearch(&apos;/*/actor&apos;, [&apos;reference/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;actor&apos;)), whereParts, params);
		}
	} else if (type == &apos;slot&apos;) {
		if ($(&apos;parameters&apos;).contains(&apos;identifier&apos;)) {
			addXPath(xpathSearch(&apos;/*/identifier&apos;, [&apos;value/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;identifier&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;schedule&apos;)) {
			addXPath(xpathSearch(&apos;/*/schedule&apos;, [&apos;reference/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;schedule&apos;)), whereParts, params);
		}
	} else if (type == &apos;measure&apos;) {
		if ($(&apos;parameters&apos;).contains(&apos;url&apos;)) {
			addXPath(xpathSearch(&apos;/*/url&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;url&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;code&apos;)) {
			addMultipleXPath([
				xpathSearch(&apos;/*/topic/coding/code&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;code&apos;)),
				xpathSearch(&apos;/*/group/code/coding/code&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;code&apos;)),
				xpathSearch(&apos;/*/group/population/code/coding/code&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;code&apos;))
			], whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;definition-text&apos;)) {
			addMultipleXPath([
				xpathSearch(&apos;/*/title&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;definition-text&apos;), false, false),
				xpathSearch(&apos;/*/subtitle&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;definition-text&apos;), false, false),
				xpathSearch(&apos;/*/publisher&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;definition-text&apos;), false, false),
				xpathSearch(&apos;/*/description&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;definition-text&apos;), false, false),
				xpathSearch(&apos;/*/purpose&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;definition-text&apos;), false, false),
				xpathSearch(&apos;/*/usage&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;definition-text&apos;), false, false),
				xpathSearch(&apos;/*/riskAdjustment&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;definition-text&apos;), false, false),
				xpathSearch(&apos;/*/rateAggregation&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;definition-text&apos;), false, false),
				xpathSearch(&apos;/*/clinicalRecommendationStatement&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;definition-text&apos;), false, false),
				xpathSearch(&apos;/*/definition&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;definition-text&apos;), false, false),
				xpathSearch(&apos;/*/guidance&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;definition-text&apos;), false, false)
			], whereParts, params);
		}
	} else if (type == &apos;measurereport&apos;) {
		if ($(&apos;parameters&apos;).contains(&apos;evaluated-resource&apos;)) {
			addXPath(xpathSearch(&apos;/*/evaluatedResource&apos;, [&apos;reference/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;evaluated-resource&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;identifier&apos;)) {
			addXPath(xpathSearch(&apos;/*/identifier&apos;, [&apos;value/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;identifier&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;measure&apos;)) {
			addMultipleXPath([
				xpathSearch(&apos;/*/measure&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;measure&apos;), true, true),
				xpathSearch(&apos;/*/measure&apos;, [&apos;@value&apos;], &quot;http://hl7.org/fhir/us/saner/&quot; + $(&apos;parameters&apos;).getParameter(&apos;measure&apos;), true, true)
			], whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;patient&apos;)) {
			addXPath(xpathSearch(&apos;/*/patient&apos;, [&apos;reference/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;patient&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;reporter&apos;)) {
			addXPath(xpathSearch(&apos;/*/reporter&apos;, [&apos;reference/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;reporter&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;status&apos;)) {
			addXPath(xpathSearch(&apos;/*/status&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;status&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;subject&apos;)) {
			addXPath(xpathSearch(&apos;/*/subject&apos;, [&apos;reference/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;subject&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;type&apos;)) {
			addXPath(xpathSearch(&apos;/*/type&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;type&apos;), true, true), whereParts, params);
		}&#xd;		if ($(&apos;parameters&apos;).contains(&apos;code&apos;)) {
			addMultipleXPath([
				xpathSearch(&apos;/*/group/code/coding/code&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;code&apos;)),
				xpathSearch(&apos;/*/group/population/code/coding/code&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;code&apos;))
			], whereParts, params);
		}
	} else if (type == &apos;location&apos;) {
		if ($(&apos;parameters&apos;).contains(&apos;identifier&apos;)) {
			addXPath(xpathSearch(&apos;/*/identifier&apos;, [&apos;value/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;identifier&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;name&apos;)) {
			addXPath(xpathSearch(&apos;/*/name&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;name&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;name:contains&apos;)) {
			addXPath(xpathSearch(&apos;/*/name&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;name:contains&apos;), false, false), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;address&apos;)) {
			addMultipleXPath([
				xpathSearch(&apos;/*/address/line&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;address&apos;), false, false),
				xpathSearch(&apos;/*/address/city&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;address&apos;), false, false),
				xpathSearch(&apos;/*/address/district&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;address&apos;), false, false),
				xpathSearch(&apos;/*/address/state&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;address&apos;), false, false),
				xpathSearch(&apos;/*/address/postalCode&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;address&apos;), false, false),
				xpathSearch(&apos;/*/address/country&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;address&apos;), false, false)
			], whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;address-city&apos;)) {
			addXPath(xpathSearch(&apos;/*/address/city&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;address-city&apos;), true, false), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;address-country&apos;)) {
			addXPath(xpathSearch(&apos;/*/address/country&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;address-country&apos;), true, false), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;address-postalcode&apos;)) {
			addXPath(xpathSearch(&apos;/*/address/postalCode&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;address-postalcode&apos;), true, false), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;address-state&apos;)) {
			addXPath(xpathSearch(&apos;/*/address/state&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;address-state&apos;), true, false), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;address-use&apos;)) {
			addXPath(xpathSearch(&apos;/*/address/use&apos;, [&apos;@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;address-use&apos;), true, false), whereParts, params);
		}
	}

	// Build up the actual query
	var usingLimit = _count &gt; 0;
	var query = getFhirSearchBaseQuery(usingLimit);
	if (whereParts.length &gt; 0) {
		query += &quot; AND &quot; + whereParts.join(&quot; AND &quot;);
	}
	query = addOrder(query, usingLimit);
	if (usingLimit) {
		query = addLimit(query, _count);
	}

//	logger.info(query);
//	logger.info(params.toString());

	var result = executeCachedQuery(query, params);
	var bundle = new Packages.org.hl7.fhir.r4.model.Bundle().setType(Packages.org.hl7.fhir.r4.model.Bundle.BundleType.SEARCHSET);

	while (result.next()) {
		var entryType = getResultSetString(result, &apos;name&apos;);
		var entryId = getResultSetString(result, &apos;id&apos;);
		var entryVersion = result.getInt(&apos;version&apos;);
		var entryData = getResultSetString(result, &apos;data&apos;);
		var entryContentType = getResultSetString(result, &apos;mimetype&apos;);
		var entryRequestMethod = getResultSetString(result, &apos;request_method&apos;);
		var entryRequestURL = getResultSetString(result, &apos;request_url&apos;);

		var resourceType = FhirUtil.getResourceType(entryType, fhirVersion);
		if (resourceType != null) {
			entryType = resourceType.getPath();
		}

		var request = new Packages.org.hl7.fhir.r4.model.Bundle.BundleEntryRequestComponent().setMethod(new Packages.org.hl7.fhir.r4.model.Bundle.HTTPVerbEnumFactory().fromCode(entryRequestMethod)).setUrl(entryRequestURL);
		var entry = bundle.addEntry().setRequest(request);
	
		var relativeUrl = type ? &apos;&apos; : (resourceType + &apos;/&apos;);
		if ($(&apos;url&apos;).contains(&apos;_search&apos;) &amp;&amp; $(&apos;method&apos;) == &apos;POST&apos;) {
			relativeUrl = &apos;../&apos; + relativeUrl;
		}
		entry.setFullUrl(requestURL.resolve(relativeUrl + entryId + &apos;/_history/&apos; + entryVersion).toString());
		entry.setResource(FhirUtil.fromXML(entryData, &apos;R4&apos;));
	}

	// Post-SQL filtering
	for (var it = bundle.getEntry().iterator(); it.hasNext();) {
		var entry = it.next();
		var filtered = false;

		try {
			if (type == &apos;measurereport&apos;) {
				if (!filtered &amp;&amp; $(&apos;parameters&apos;).contains(&apos;date&apos;) &amp;&amp; isDateFiltered($(&apos;parameters&apos;).getParameter(&apos;date&apos;), entry.getResource().getDate())) {
					filtered = true;
				}
				if (!filtered &amp;&amp; $(&apos;parameters&apos;).contains(&apos;period&apos;) &amp;&amp; isDateFiltered($(&apos;parameters&apos;).getParameter(&apos;period&apos;), entry.getResource().getPeriod().getStart())) {
					filtered = true;
				}
				if (!filtered &amp;&amp; $(&apos;parameters&apos;).contains(&apos;subject:Location.near&apos;) &amp;&amp; isSubjectLocationFiltered(entry.getResource(), $(&apos;parameters&apos;).getParameter(&apos;subject:Location.near&apos;), fhirVersion)) {
					filtered = true;
				}
			}
		} catch (e) {
			logger.error(&apos;Failed to filter search entries: &apos; + e);
		}

		if (filtered) {
			it.remove();
		}
	}

	// Add _include resources
	if (_includeList != null) {
		var includeMap = Maps.map();
		
		for each (_include in _includeList.toArray()) {
			addIncludeResources(bundle.getEntry(), _include, includeMap);
		}

		for (var includeResourceMapIt = includeMap.values().iterator(); includeResourceMapIt.hasNext();) {
			bundle.getEntry().addAll(includeResourceMapIt.next().values());
		}
	}
	
	bundle.setTotal(bundle.getEntry().size());

	var response = FhirResponseFactory.getSearchResponse(FhirUtil.toXML(bundle, fhirVersion), 200, FhirUtil.getMIMETypeXML());
	responseMap.put(&apos;response&apos;, response);
	return response.getMessage();
} catch (e) {
	return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error searching resources.&apos;, fhirVersion, 500, e);
}

/**
	Creates an XPath search selector within the given base node.

	@param String base - The base path to select within.
	@param String[] nodes - An array of child nodes to select by (combined with OR operator).
	@param String value - The value to test.
	@param Boolean equals - If true, the test will be equality, otherwise it will be a contains.
	@param Boolean caseSensitive - If true, the contains test will match using case sensitivity.
	@return The built-up contains selector.
*/
function xpathSearch(base, nodes, value, equals, caseSensitive) {
	var search = base + &quot;[&quot;;
	value = new java.lang.String(value).replaceAll(&quot;&apos;&quot;, &quot;&apos;&apos;&quot;);
	if (!caseSensitive) {
		value = value.toLowerCase();
	}
	
	for (var i = 0; i &lt; nodes.length; i++) {
		var node = convertXPathNodeSingleton(nodes[i]);
		if (!caseSensitive) {
			node = xpathLowerCase(node);
		}
		
		if (equals) {
			search += node + &quot; = &apos;&quot; + value + &quot;&apos;&quot;;
		} else {
			search += &quot;contains(&quot; + node + &quot;, &apos;&quot; + value + &quot;&apos;)&quot;;
		}
		
		if (i &lt; nodes.length - 1) {
			search += &quot; or &quot;;
		}
	}
	
	search += &quot;]&quot;;
	return search;
}</script>
      </properties>
      <transformer version="3.9.0">
        <elements/>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
            <fhirVersion>R4</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>XML</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.0">
        <elements/>
        <inboundDataType>FHIR</inboundDataType>
        <outboundDataType>FHIR</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>STU3</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>JSON</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
            <fhirVersion>STU3</fhirVersion>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
            <serializationType>RAW</serializationType>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

// Return an OperationOutcome if no destinations or anything else already handled the response
if (!responseMap.containsKey(&apos;response&apos;)) {
	if (sourceMap.get(&apos;fhirInteraction&apos;) == &apos;operation&apos;) {
		createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &apos;Invalid or unsupported operation: &apos; + sourceMap.get(&apos;fhirOperationName&apos;), &apos;R4&apos;);
	} else {
		createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &apos;Invalid request URI.&apos;, &apos;R4&apos;);
	}
}
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data

// Close the database connection
var dbConn = $gc(&apos;dbConn&apos;);
if (dbConn != null) {
	try { dbConn.close() } catch(e) {}
	globalChannelMap.remove(&apos;dbConn&apos;);
}

return;</undeployScript>
  <properties version="3.9.0">
    <clearGlobalChannelMap>false</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>FHIR_TYPE</name>
        <type>STRING</type>
        <mappingName>fhirType</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>FHIR_INTERACTION</name>
        <type>STRING</type>
        <mappingName>fhirInteraction</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>FHIR_ID</name>
        <type>STRING</type>
        <mappingName>fhirId</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>FHIR_VID</name>
        <type>STRING</type>
        <mappingName>fhirVid</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>FHIR_OPERATION</name>
        <type>STRING</type>
        <mappingName>fhirOperationName</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.9.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1592856058695</time>
        <timezone>America/Los_Angeles</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.9.0">
        <id>1f350e29-158e-4645-8809-9e60d1a47854</id>
        <name>FHIR DB Operations</name>
        <revision>3</revision>
        <lastModified>
          <time>1592856056113</time>
          <timezone>UTC</timezone>
        </lastModified>
        <description>Functions used by the FHIR Listener channel to communicate with the database.
PostgreSQL and SQL Server are supported. If you want to support other database
servers, feel free to add your own database-specific operations and queries.</description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
          <string>b8d58010-6982-47d8-9253-365ac4fd03d1</string>
          <string>6540dd0b-572f-471b-bfcb-6288a38191ac</string>
          <string>919a4220-394f-48ea-92f8-841afc86ce3e</string>
          <string>96ed09ab-0af2-4414-85e0-61629d76085b</string>
          <string>6ee5452f-792a-4f77-aada-4bca1de14b07</string>
          <string>f2075620-e011-4280-bbd2-33986a15313a</string>
          <string>32e8a925-b0de-440d-9d5c-77265106de8f</string>
          <string>23e68077-7c1c-4638-b5b5-9d029cef6163</string>
          <string>a25c03d6-3b28-495b-a3ed-0015c923e19f</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>11b8bb4e-6a05-481c-ad7e-e2026c062daa</string>
          <string>b7ea555f-67e8-4380-8d67-ddbca4db628e</string>
          <string>98d6e634-66b1-45ca-b5c6-a9d1a7b82c1a</string>
          <string>c57fce23-dc30-4095-8040-72c0e83dce8d</string>
          <string>fbd897e1-b661-490a-b546-275f48e43f7d</string>
          <string>e99f4297-62bc-4323-a04d-752cda42e659</string>
          <string>938511aa-2277-493f-9014-f568bb361f64</string>
          <string>f6710348-d553-4c88-ab71-41a88e929e4d</string>
          <string>50ead7ad-6d84-4217-a22b-0902c08bc091</string>
          <string>cb5cbac4-c3f6-4f5f-a417-e80103fb2b62</string>
          <string>2f7e3c54-1320-4ed1-9d75-a9af7d7e99da</string>
          <string>daeb0a8a-bce8-4114-8748-41e61d0f5da1</string>
          <string>157efdf9-3402-491b-92b1-5929bc4e787f</string>
          <string>80804528-767e-4972-ac58-ab532e1986bc</string>
          <string>752dbe9d-ba15-422b-8a3e-2bff57ad6a78</string>
          <string>7db1559f-6ca5-464a-954c-6eb8a0e7656c</string>
          <string>6978b08f-7b35-419c-806c-40ab88352adc</string>
          <string>f06b628e-0b68-4cb3-9eea-cb7788d0a8ef</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.9.0">
            <id>13e82aac-df07-463e-b8ca-8f4b98243618</id>
            <name>FHIR DB - Execute Cached Query</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182071</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a prepared query on the FHIR database and returns a CachedRowSet.

	@param {String} expression - The prepared statement to be executed.
	@param {Array} parameters - The parameters for the prepared statement.
	@param {DatabaseConnection} dbConn - Optionally provide a specific connection object.
	@return {CachedRowSet} The result of the query, as a CachedRowSet.
*/
function executeCachedQuery(expression, parameters, dbConn) {
	return executeOperation(&apos;executeCachedQuery&apos;, expression, parameters, dbConn);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>9ec9d96c-4ea4-4f1c-8520-b73782f36aed</id>
            <name>FHIR DB - Execute Cached Query and Get Keys</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182303</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes an INSERT/UPDATE statement on the database and returns a CachedRowSet containing any
	generated keys.

	@param {String} expression - The prepared statement to be executed.
	@param {Array} parameters - The parameters for the prepared statement.
	@param {DatabaseConnection} dbConn - Optionally provide a specific connection object.
	@return {CachedRowSet} A CachedRowSet containing any generated keys.
*/
function executeUpdateAndGetGeneratedKeys(expression, parameters, dbConn) {
	return executeOperation(&apos;executeUpdateAndGetGeneratedKeys&apos;, expression, parameters, dbConn);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>8960e710-4870-49ea-b952-63d2b74b7bbc</id>
            <name>FHIR DB - Execute Update</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591181938</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a prepared INSERT/UPDATE statement on the database and returns the row count.

	@param {String} expression - The prepared statement to be executed.
	@param {Array} parameters - The parameters for the prepared statement.
	@param {DatabaseConnection} dbConn - Optionally provide a specific connection object.
	@return {int} A count of the number of updated rows.
*/
function executeUpdate(expression, parameters, dbConn) {
	return executeOperation(&apos;executeUpdate&apos;, expression, parameters, dbConn);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>23d0fa52-0d56-4e9a-82a5-56a6a3d55e43</id>
            <name>FHIR DB - Get Connection</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591181978</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Retrieves the FHIR database connection from the global channel map, creating a new one if necessary.

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.
*/
function getFHIRDBConnection(recreate) {
	var dbConn = $gc(&apos;dbConn&apos;);

	if (!dbConn || recreate) {
		if (dbConn) {
			try {
				dbConn.close();
			} catch (e) {}
		}
		dbConn = createFHIRDBConnection();
		$gc(&apos;dbConn&apos;, dbConn);
	}

	return dbConn;
}

function createFHIRDBConnection() {
	return DatabaseConnectionFactory.createDatabaseConnection($(&apos;fhirDBDriver&apos;), $(&apos;fhirDBUrl&apos;), $(&apos;fhirDBUsername&apos;), $(&apos;fhirDBPassword&apos;));
}

function executeOperation(operation, expression, parameters, dbConn) {
	var createDbConn = typeof dbConn == &apos;undefined&apos;;
	if (createDbConn) {
		dbConn = getFHIRDBConnection();
	}
	var attempts = 0;
	var maxAttempts = NumberUtils.toInt($(&apos;fhirDBMaxRetries&apos;) + &apos;&apos;, 0) + 1;

	while (attempts &lt; maxAttempts) {
		attempts++;

		try {
			if (parameters) {
				for (var i in parameters) {
					var param = parameters[i];
					if (param instanceof Number) {
						parameters[i] = new java.lang.Integer(param);
					} else if (param instanceof java.util.Date) {
						parameters[i] = convertDateParameter(param);
					}
				}
				
				return dbConn[operation](expression, java.util.Arrays.asList(parameters));
			} else {
				return dbConn[operation](expression);
			}
		} catch (e) {
			logger.info(&apos;Error executing statement, checking if valid...&apos;);
			var throwException = false;

			try {
				dbConn.executeCachedQuery(&apos;SELECT 1&apos;);
			} catch (e2) {
				if (createDbConn) {
					logger.info(&apos;Connection invalid, recreating...&apos;);
	
					try {
						dbConn = getFHIRDBConnection(true);
					} catch (e3) {
						throwException = true;
					}
				} else {
					throwException = true;
				}
			}

			if (attempts &gt;= maxAttempts) {
				throwException = true;
			}

			if (throwException) {
				var errorMessage = &apos;Unable to execute statement.\n&apos;;
				errorMessage += &apos;Expression: &apos; + expression + &apos;\n&apos;;
				if (parameters) {
					errorMessage += &apos;Parameters: &apos; + java.util.Arrays.asList(parameters).toString();
				}
				logger.error(errorMessage, e.javaException);
				throw e;
			}

			java.lang.Thread.sleep(1000);
		}
	}
}

function convertDateParameter(date) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);

	if (dbType == &apos;postgres&apos;) {
		return new java.sql.Timestamp(date.getTime());
	} else if (dbType == &apos;sqlserver&apos;) {
		return convertDate(date, &apos;yyyy-MM-dd HH:mm:ss.SSSZZ&apos;);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>269ac003-07f8-4914-9572-b2433afa116a</id>
            <name>Get ResultSet Date</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182190</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Retrives the java.util.Date value for a particular column from a ResultSet. Handles cases where the
	object returned from the ResultSet is a string.

	@param {ResultSet} resultSet - The ResultSet object to retrieve from.
	@param {String} columnName - The name or alias of the column to retrieve.
	@return {Date} The java.util.Date value.
*/
function getResultSetDate(resultSet, columnName) {
	var obj = resultSet.getObject(columnName);
	if (obj != null) {
		if (obj instanceof java.lang.String) {
			obj = getDate(obj);
		}
	}
	return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>278733a7-de15-4324-bfa0-2034ae868afd</id>
            <name>Get ResultSet String</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182001</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Retrives the string value for a particular column from a ResultSet. Handles instances of
	java.sql.Clob and java.sql.Blob as well (with the JVM default charset).

	@param {ResultSet} resultSet - The ResultSet object to retrieve from.
	@param {String} columnName - The name or alias of the column to retrieve.
	@return {String} The string value.
*/
function getResultSetString(resultSet, columnName) {
	var obj = resultSet.getObject(columnName);
	if (obj != null) {
		if (obj instanceof java.sql.Clob) {
			obj = org.apache.commons.io.IOUtils.toString(obj.getCharacterStream());
		} else if (obj instanceof java.sql.Blob) {
			obj = org.apache.commons.io.IOUtils.toString(obj.getBinaryStream());
		} else {
			obj = java.lang.String.valueOf(obj);
		}
	}
	return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>62e254fc-a206-41b2-bf9f-e9c55cb49ef1</id>
            <name>History Utility Methods</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182091</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	These functions are used with the history interaction.
*/
function getFhirHistoryBaseQuery() {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;SELECT name, id, version, data::TEXT, mimetype, deleted, request_method, request_url FROM resource&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;SELECT name, id, version, CAST(data AS NVARCHAR(MAX)) AS data, mimetype, deleted, request_method, request_url FROM resource&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function getFhirHistorySinceWherePart() {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;last_modified &gt;= ?::TIMESTAMP WITH TIME ZONE&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;last_modified &gt;= CAST(? AS DATETIME)&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>a67e8be3-11a3-4403-aaa7-ea495a98af23</id>
            <name>Insert Deleted Resource</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182055</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Inserts a deleted entry for a resource and returns its DB sequence ID.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@param {Number} versionId - The version ID of the resource.
	@param {Date} lastUpdated - The last updated time of the resource.
	@param {String} method - The HTTP method used to create the resource.
	@param {String} url - The HTTP URL used to create the resource.
	@return {Number} The database sequence ID for the inserted resource.
*/
function insertFhirDeletedResource(type, id, versionId, lastUpdated, method, url) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);

	if (dbType == &apos;postgres&apos;) {
		var params = [type, id, versionId, lastUpdated, $(&apos;method&apos;), $(&apos;url&apos;)];
		var result = executeUpdateAndGetGeneratedKeys(&quot;INSERT INTO resource (name, id, version, last_modified, deleted, request_method, request_url) VALUES (?, ?, ?, ?, TRUE, ?, ?)&quot;, params);
		result.next();
		return result.getInt(1);
	} else if (dbType == &apos;sqlserver&apos;) {
		var dbConn = createFHIRDBConnection();
		
		try {
			dbConn.setAutoCommit(false);
			
			var idResult = executeCachedQuery(&apos;SELECT id FROM resource_sequence WITH (UPDLOCK)&apos;, [], dbConn);
			idResult.next();
			var sequenceId = idResult.getInt(1);
			executeUpdate(&apos;UPDATE resource_sequence SET ID = ID + 1&apos;, [], dbConn);
			dbConn.commit();

			var params = [sequenceId, type, id, versionId, lastUpdated, $(&apos;method&apos;), $(&apos;url&apos;)];
			executeUpdate(&quot;INSERT INTO resource (sequence_id, name, id, version, last_modified, deleted, request_method, request_url) VALUES (?, ?, ?, ?, ?, 1, ?, ?)&quot;, params, dbConn);
			dbConn.commit();
			
			return sequenceId;
		} catch (e) {
			try { dbConn.rollback() } catch (e2) {}
			throw e;
		} finally {
			try { dbConn.close() } catch (e) {}
		}
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>407c077f-579a-47af-bb78-1829cdd789c3</id>
            <name>Insert Resource</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182235</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Inserts a new resource and returns its DB sequence ID.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@param {Number} versionId - The version ID of the resource.
	@param {Date} lastUpdated - The last updated time of the resource.
	@param {String} data - The resource data.
	@param {String} contentType - The MIME type of the resource data.
	@param {String} method - The HTTP method used to create the resource.
	@param {String} url - The HTTP URL used to create the resource.
	@return {Number} The database sequence ID for the inserted resource.
*/
function insertFhirResource(type, id, versionId, lastUpdated, data, contentType, method, url) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);

	if (dbType == &apos;postgres&apos;) {
		var params = [type, id, versionId, lastUpdated, data, contentType, method, url];
		var result = executeUpdateAndGetGeneratedKeys(&quot;INSERT INTO resource (name, id, version, last_modified, data, mimetype, request_method, request_url) VALUES (?, ?, ?, ?, ?::XML, ?, ?, ?)&quot;, params);
		result.next();
		return result.getInt(1);
	} else if (dbType == &apos;sqlserver&apos;) {
		var dbConn = createFHIRDBConnection();
		
		try {
			dbConn.setAutoCommit(false);
			
			var idResult = executeCachedQuery(&apos;SELECT id FROM resource_sequence WITH (UPDLOCK)&apos;, [], dbConn);
			idResult.next();
			var sequenceId = idResult.getInt(1);
			executeUpdate(&apos;UPDATE resource_sequence SET ID = ID + 1&apos;, [], dbConn);
			dbConn.commit();

			var params = [sequenceId, type, id, versionId, lastUpdated, data, contentType, method, url];
			executeUpdate(&quot;INSERT INTO resource (sequence_id, name, id, version, last_modified, data, mimetype, request_method, request_url) VALUES (?, ?, ?, ?, ?, CAST(? AS XML), ?, ?, ?)&quot;, params, dbConn);
			dbConn.commit();
			
			return sequenceId;
		} catch (e) {
			try { dbConn.rollback() } catch (e2) {}
			throw e;
		} finally {
			try { dbConn.close() } catch (e) {}
		}
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>d1b90f30-f5fb-40c0-a42d-f999717f75fb</id>
            <name>Search _include Utility Methods</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182259</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Iterates through each entry in the bundle and includes any referenced resources, depending on the
	_include parameter. A value of &apos;*&apos; indicates to include all resources. The includeMap will be used
	to ensure that a resource is only included once.

	@param {List&lt;BundleEntryComponent&gt;} bundleEntryList - The entries in the bundle to include
		resource references from.
	@param {String} _include - The _include parameter.
	@param {Map&lt;String, Map&lt;String, BundleEntryComponent&gt;&gt;} includeMap - A 2-dimensional map from FHIR type and ID
		to the BundleEntryComponent object.
	@return {Any} 
*/
function addIncludeResources(bundleEntryList, _include, includeMap) {
	for (var it = bundleEntryList.iterator(); it.hasNext();) {
		doAddIncludeResources(it.next(), _include, includeMap)
	}
}

function doAddIncludeResources(bundleEntry, _include, includeMap) {
	var resource = bundleEntry.getResource();
	var resourceType = resource.fhirType();

	if (resourceType == &apos;MeasureReport&apos;) {
		selectIncludedResource(resource.getMeasure(), &apos;Measure&apos;, includeMap);
		selectIncludedResource(resource.getSubject(), &apos;Location&apos;, includeMap);
		selectIncludedResource(resource.getReporter(), &apos;Organization&apos;, includeMap);
		selectIncludedResource(resource.getEvaluatedResource(), null, includeMap);
	}
}

function selectIncludedResource(reference, fhirTypeHint, includeMap) {
	if (reference) {
		if (reference instanceof java.util.List) {
			for (var it = reference.iterator(); it.hasNext();) {
				selectIncludedResource(it.next(), fhirTypeHint, includeMap);
			}
		} else if (reference instanceof org.hl7.fhir.instance.model.api.IBaseReference) {
			doSelectIncludedResource(reference.getReference(), fhirTypeHint, includeMap);
		} else {
			doSelectIncludedResource(new java.lang.String(reference), fhirTypeHint, includeMap);
		}
	}
}

function doSelectIncludedResource(referenceStr, fhirTypeHint, includeMap) {
	if (referenceStr) {
		var referenceStrParts = referenceStr.split(&apos;/&apos;);

		// Parse out reference type/id
		// Example: http://example.org/fhir/Patient/123
		// Example: Patient/123
		var fhirType = fhirTypeHint;
		var id;
		
		if (referenceStrParts.length &gt; 0) {
			id = referenceStrParts[referenceStrParts.length - 1];
		}
		if (referenceStrParts.length &gt; 1) {
			fhirType = referenceStrParts[referenceStrParts.length - 2];
		}

		if (fhirType &amp;&amp; id) {
			// Check whether it&apos;s already in the map
			if (includeMap.get(fhirType) == null || includeMap.get(fhirType).get(id) == null) {
				var query = getFhirSearchBaseQuery() + &apos; AND name = ? AND id = ?&apos;;
				var result = executeCachedQuery(query, [new java.lang.String(fhirType).toLowerCase(), id]);
				var entry = getIncludedEntry(result);

				if (entry) {
					var includeResourceMap = includeMap.get(fhirType);
					if (includeResourceMap == null) {
						includeResourceMap = Maps.map();
						includeMap.put(fhirType, includeResourceMap);
					}
					includeResourceMap.put(id, entry);
				}
			}
		}
	}
}

function getIncludedEntry(result) {
    if (result.next()) {
        var fhirVersion = &apos;R4&apos;;
        var bundle = new Packages.org.hl7.fhir.r4.model.Bundle();

        var requestURL = $(&apos;url&apos;);
        if (requestURL) {
            if (!requestURL.endsWith(&apos;/&apos;)) {
                requestURL += &apos;/&apos;;
            }
            requestURL = new java.net.URI(requestURL);
        }

        var entryType = getResultSetString(result, &apos;name&apos;);
        var entryId = getResultSetString(result, &apos;id&apos;);
        var entryVersion = result.getInt(&apos;version&apos;);
        var entryData = getResultSetString(result, &apos;data&apos;);
        var entryContentType = getResultSetString(result, &apos;mimetype&apos;);
        var entryRequestMethod = getResultSetString(result, &apos;request_method&apos;);
        var entryRequestURL = getResultSetString(result, &apos;request_url&apos;);

        var resourceType = FhirUtil.getResourceType(entryType, fhirVersion);
        if (resourceType != null) {
            entryType = resourceType.getPath();
        }

        var request = new Packages.org.hl7.fhir.r4.model.Bundle.BundleEntryRequestComponent().setMethod(new Packages.org.hl7.fhir.r4.model.Bundle.HTTPVerbEnumFactory().fromCode(entryRequestMethod)).setUrl(entryRequestURL);
        var entry = bundle.addEntry().setRequest(request);
    
        var relativeUrl = resourceType + &apos;/&apos;;
        if ($(&apos;url&apos;) &amp;&amp; $(&apos;url&apos;).contains(&apos;_search&apos;) &amp;&amp; $(&apos;method&apos;) == &apos;POST&apos;) {
            relativeUrl = &apos;../&apos; + relativeUrl;
        }
        entry.setFullUrl(requestURL.resolve(relativeUrl + entryId + &apos;/_history/&apos; + entryVersion).toString());
        entry.setResource(FhirUtil.fromXML(entryData, fhirVersion));
        return entry;
    } else {
        return null;
    }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>70e7522a-1908-4ef0-aee7-f6e2334bfbd6</id>
            <name>Search Post-SQL Filtering Utility Methods</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182115</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} dateParameter - 
	@param {java.util.Date} resourceDate - 
	@return {Boolean} return description
*/
function isDateFiltered(dateParameter, resourceDate) {
	var filtered = false;
	
	if (dateParameter) {
		dateParameter = new java.lang.String(dateParameter);
		
		if (dateParameter.length() &gt; 2) {
			var operator = dateParameter.substring(0, 2);
			var dateStr = dateParameter.substring(2);
			if (!/[a-zA-Z]{2}/.test(operator)) {
				operator = &apos;eq&apos;;
				dateStr = dateParameter;
			}
			var date = DateUtil.getDate(&apos;yyyy-MM-dd&apos;, dateStr);
		
			if (resourceDate) {
				if (operator == &apos;eq&apos;) {
					if (!(resourceDate.compareTo(date) == 0)) {
						filtered = true;
					}
				} else if (operator == &apos;lt&apos;) {
					if (!(resourceDate.compareTo(date) &lt; 0)) {
						filtered = true;
					}
				} else if (operator == &apos;gt&apos;) {
					if (!(resourceDate.compareTo(date) &gt; 0)) {
						filtered = true;
					}
				} else if (operator == &apos;ge&apos;) {
					if (!(resourceDate.compareTo(date) &gt;= 0)) {
						filtered = true;
					}
				} else if (operator == &apos;le&apos;) {
					if (!(resourceDate.compareTo(date) &lt;= 0)) {
						filtered = true;
					}
				}
			} else {
				filtered = true;
			}
		}
	}

	return filtered;
}

function isLocationNearFiltered(latitude, longitude, nearParam) {
	var nearParamParts = new java.lang.String(nearParam).split(&apos;\\|&apos;);
	var paramLat = parseFloat(nearParamParts[0]);
	var paramLong = parseFloat(nearParamParts[1]);
	var paramDistance = parseFloat(nearParamParts[2]);
	var paramUnits = &apos;km&apos;;
	if (nearParamParts.length &gt; 3) {
		paramUnits = nearParamParts[3];
	}
	// Convert to km
	if (paramUnits == &apos;m&apos;) {
		paramDistance = paramDistance / 1000.0;
	} else if (paramUnits == &apos;mi&apos; || paramUnits == &apos;miles&apos;) {
		paramDistance = paramDistance * 1.609344;
	}

	var latDistance = java.lang.Math.toRadians(paramLat - latitude);
	var lonDistance = java.lang.Math.toRadians(paramLong - longitude);
	var a = java.lang.Math.sin(latDistance / 2) * java.lang.Math.sin(latDistance / 2)
			+ java.lang.Math.cos(java.lang.Math.toRadians(latitude)) * java.lang.Math.cos(java.lang.Math.toRadians(paramLat))
			* java.lang.Math.sin(lonDistance / 2) * java.lang.Math.sin(lonDistance / 2);
	var c = 2 * java.lang.Math.atan2(java.lang.Math.sqrt(a), java.lang.Math.sqrt(1 - a));
	var distance = 6371 * c;

	return distance &gt; paramDistance;
}

function isSubjectLocationFiltered(resource, locationNearParam, fhirVersion) {
	var filtered = true;
					
	var subject = resource.getSubject();
	if (subject) {
		var latitude = null;
		var longitude = null;
		
		var geoLocExt = getGeoLocExt(subject);
		
		if (geoLocExt) {
			latitude = geoLocExt.getExtensionByUrl(&apos;latitude&apos;).getValueAsPrimitive().getValueAsNumber().doubleValue();
			longitude = geoLocExt.getExtensionByUrl(&apos;longitude&apos;).getValueAsPrimitive().getValueAsNumber().doubleValue();
		} else {
			var locationRef = subject.getReference();
			
			if (locationRef &amp;&amp; locationRef.indexOf(&apos;Location/&apos;) &gt;= 0) {
				var locationId = locationRef.substring(locationRef.indexOf(&apos;Location/&apos;) + 9);
				var result = executeCachedQuery(getFhirSearchBaseQuery(false) + &quot; AND name = &apos;location&apos; AND id = ?&quot;, [locationId]);
				
				if (result.next()) {
					var location = FhirUtil.fromXML(getResultSetString(result, &apos;data&apos;), fhirVersion);
					var position = location.getPosition();
					
					if (position) {
						latitude = position.getLatitude().doubleValue();
						longitude = position.getLongitude().doubleValue();
					} else {
						var address = location.getAddress();
						if (address) {
							var geoLocExt = getGeoLocExt(address);
							if (geoLocExt) {
								latitude = geoLocExt.getExtensionByUrl(&apos;latitude&apos;).getValueAsPrimitive().getValueAsNumber().doubleValue();
								longitude = geoLocExt.getExtensionByUrl(&apos;longitude&apos;).getValueAsPrimitive().getValueAsNumber().doubleValue();
							}
						}
					}
				}
			}
		}

		if (latitude != null &amp;&amp; longitude != null) {
			if (!isLocationNearFiltered(latitude, longitude, locationNearParam)) {
				filtered = false;
			}
		}
	}

	return filtered;
}

function getGeoLocExt(resource) {
	var geoLocExt = null;
	if (resource) {
		geoLocExt = resource.getExtensionByUrl(&quot;http://hl7.org/fhir/us/saner/StructureDefinition/GeoLocation&quot;);
		if (!geoLocExt) {
			geoLocExt = resource.getExtensionByUrl(&quot;http://hl7.org/fhir/us/saner/StructureDefinition/geolocation&quot;);
		}
		if (!geoLocExt) {
			geoLocExt = resource.getExtensionByUrl(&quot;http://hl7.org/fhir/StructureDefinition/GeoLocation&quot;);
		}
		if (!geoLocExt) {
			geoLocExt = resource.getExtensionByUrl(&quot;http://hl7.org/fhir/StructureDefinition/geolocation&quot;);
		}
	}
	return geoLocExt;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>f5c11e82-475f-4a53-a370-273a6027eba0</id>
            <name>Search Utility Methods</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591181896</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	These functions are used with the search interaction.
*/
function getFhirSearchBaseQuery(usingLimit) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;SELECT name, id, version, data::TEXT, mimetype, request_method, request_url FROM resource r1 WHERE version = (SELECT MAX(version) FROM resource r2 WHERE r2.name = r1.name AND r2.id = r1.id) AND (deleted IS NULL OR deleted = FALSE)&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		var query = &quot;SELECT name, id, version, CAST(data AS NVARCHAR(MAX)) AS data, mimetype, request_method, request_url&quot;;
		if (usingLimit) {
			query += &quot;, ROW_NUMBER() OVER (&quot; + getOrderClause() + &quot;) AS ROWNUM&quot;;
		}
		return query + &quot; FROM resource r1 WHERE version = (SELECT MAX(version) FROM resource r2 WHERE r2.name = r1.name AND r2.id = r1.id) AND (deleted IS NULL OR deleted = 0)&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function getFhirSearchContentWherePart() {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;data::TEXT ILIKE ?&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;UPPER(CAST(data AS NVARCHAR(MAX))) LIKE UPPER(?)&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function getFhirSearchLastUpdatedWherePart(lastUpdatedOperator) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;last_modified &quot; + convertFhirParameterOperator(lastUpdatedOperator) + &quot; ?::TIMESTAMP WITH TIME ZONE&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;last_modified &quot; + convertFhirParameterOperator(lastUpdatedOperator) + &quot; CAST(? AS DATETIMEOFFSET)&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function convertFhirParameterOperator(operator) {
	switch ((operator + &apos;&apos;).toLowerCase()) {
		case &apos;eq&apos;: return &apos;=&apos;;
		case &apos;ne&apos;: return &apos;!=&apos;;
		case &apos;gt&apos;: return &apos;&gt;&apos;;
		case &apos;lt&apos;: return &apos;&lt;&apos;;
		case &apos;ge&apos;: return &apos;&gt;=&apos;;
		case &apos;le&apos;: return &apos;&lt;=&apos;;
		case &apos;sa&apos;: return &apos;&gt;&apos;;
		case &apos;eb&apos;: return &apos;&lt;&apos;;
		case &apos;ap&apos;: return &apos;=&apos;;
		default: return &apos;=&apos;;
	}
}

function convertXPathNodeSingleton(node) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return node;
	} else if (dbType == &apos;sqlserver&apos;) {
		return node.split(&apos;/&apos;).join(&apos;[1]/&apos;);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function xpathLowerCase(value) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;translate(&quot; + value + &quot;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;, &apos;abcdefghijklmnopqrstuvwxyz&apos;)&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;fn:lower-case(&quot; + value + &quot;)&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function getFhirSearchXPathWherePart() {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;XPATH_EXISTS(?, data)&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;data.exist(?) = 1&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function addXPath(xpath, whereParts, params) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		whereParts.push(getFhirSearchXPathWherePart());
		params.push(xpath);
	} else if (dbType == &apos;sqlserver&apos;) {
		whereParts.push(getFhirSearchXPathWherePart().replace(&apos;?&apos;, &quot;&apos;&quot; + xpath.replace(/&apos;/g, &quot;&apos;&apos;&quot;) + &quot;&apos;&quot;));
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function addMultipleXPath(xpathParts, whereParts, params) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);

	var wherePart = &apos;(&apos;;
	for (var i in xpathParts) {
		if (i &gt; 0) {
			wherePart += &apos; OR &apos;
		}
		if (dbType == &apos;postgres&apos;) {
			wherePart += getFhirSearchXPathWherePart();
			params.push(xpathParts[i]);
		} else if (dbType == &apos;sqlserver&apos;) {
			wherePart += getFhirSearchXPathWherePart().replace(&apos;?&apos;, &quot;&apos;&quot; + xpath.replace(/&apos;/g, &quot;&apos;&apos;&quot;) + &quot;&apos;&quot;);
		} else {
			throw &apos;Unsupported DB type: &apos; + dbType;
		}
	}
	wherePart += &apos;)&apos;;
	whereParts.push(wherePart);
}

function addOrder(query, usingLimit) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return query + &quot; &quot; + getOrderClause();
	} else if (dbType == &apos;sqlserver&apos;) {
		if (usingLimit) {
			return query;
		} else {
			return query + &quot; &quot; + getOrderClause();
		}
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function getOrderClause() {
	return &quot;ORDER BY name ASC, id ASC, version DESC&quot;;
}

function addLimit(query, limit) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return query + &quot; LIMIT &quot; + limit;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;SELECT A.* FROM (&quot; + query + &quot;) AS A WHERE A.ROWNUM &lt;= &quot; + limit;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>785079c4-fc60-4e5c-a4ec-645cb3741560</id>
            <name>Select Resource Instance</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182282</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns a ResultSet for a specific resource instance.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@return {ResultSet} The ResultSet.
*/
function getResource(type, id) {
	var params = [type, id];
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);

	if (dbType == &apos;postgres&apos;) {
		return executeCachedQuery(&quot;SELECT version, data::TEXT, mimetype, last_modified, deleted FROM resource WHERE name = ? AND id = ? ORDER BY version DESC LIMIT 1&quot;, params);
	} else if (dbType == &apos;sqlserver&apos;) {
		return executeCachedQuery(&quot;SELECT TOP 1 version, CAST(data AS NVARCHAR(MAX)) AS data, mimetype, last_modified, deleted FROM resource WHERE name = ? AND id = ? ORDER BY version DESC&quot;, params);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>9411a28b-5f0d-4bc3-8acf-d892b5beb7db</id>
            <name>Select Resource Instance by Version</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591181920</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns a ResultSet for a specific resource instance at a specific version.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@param {Number} versionId - The version ID of the resource.
	@return {ResultSet} The ResultSet.
*/
function getResourceVersion(type, id, versionId) {
	var params = [type, id, parseInt(versionId, 10)];
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);

	if (dbType == &apos;postgres&apos;) {
		return executeCachedQuery(&quot;SELECT data::TEXT, mimetype, last_modified, deleted FROM resource WHERE name = ? AND id = ? AND version = ?&quot;, params);
	} else if (dbType == &apos;sqlserver&apos;) {
		return executeCachedQuery(&quot;SELECT CAST(data AS NVARCHAR(MAX)) AS data, mimetype, last_modified, deleted FROM resource WHERE name = ? AND id = ? AND version = ?&quot;, params);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>afe40f10-efc5-4014-833a-e96be7a422d1</id>
            <name>Select Version</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591181954</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns the version ID for a given resource, or 0 if it doesn&apos;t exist.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@return {Number} The version ID, or 0 if the resource doesn&apos;t exist.
*/
function getFhirVersion(type, id) {
	var params = [type, id];
	var result;

	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		result = executeCachedQuery(&quot;SELECT version FROM resource WHERE name = ? AND id = ? ORDER BY version DESC LIMIT 1&quot;, params);
	} else if (dbType == &apos;sqlserver&apos;) {
		result = executeCachedQuery(&quot;SELECT TOP 1 version FROM resource WHERE name = ? AND id = ? ORDER BY version DESC&quot;, params);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
	
	if (result.next()) {
		return result.getInt(1);
	}
	return 0;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>2c822c38-30aa-4447-8e9e-9ea07e597c9d</id>
            <name>Select Version and Deleted ResultSet</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182021</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns a ResultSet with the version and deleted flag for a given resource.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@return {ResultSet} The ResultSet.
*/
function getFhirVersionAndDeleted(type, id) {
	var params = [type, id];
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return executeCachedQuery(&quot;SELECT version, deleted FROM resource WHERE name = ? AND id = ? ORDER BY version DESC LIMIT 1&quot;, params);
	} else if (dbType == &apos;sqlserver&apos;) {
		return executeCachedQuery(&quot;SELECT TOP 1 version, deleted FROM resource WHERE name = ? AND id = ? ORDER BY version DESC&quot;, params);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="3.9.0">
        <id>a084db27-49e0-4c67-893b-ffcc9f1d6e94</id>
        <name>FHIR Helper Functions</name>
        <revision>3</revision>
        <lastModified>
          <time>1592856056107</time>
          <timezone>UTC</timezone>
        </lastModified>
        <description>Other common helper functions used by the FHIR Listener channel.</description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
          <string>11b8bb4e-6a05-481c-ad7e-e2026c062daa</string>
          <string>b7ea555f-67e8-4380-8d67-ddbca4db628e</string>
          <string>6ee5452f-792a-4f77-aada-4bca1de14b07</string>
          <string>32e8a925-b0de-440d-9d5c-77265106de8f</string>
          <string>c57fce23-dc30-4095-8040-72c0e83dce8d</string>
          <string>fbd897e1-b661-490a-b546-275f48e43f7d</string>
          <string>e99f4297-62bc-4323-a04d-752cda42e659</string>
          <string>23e68077-7c1c-4638-b5b5-9d029cef6163</string>
          <string>f6710348-d553-4c88-ab71-41a88e929e4d</string>
          <string>50ead7ad-6d84-4217-a22b-0902c08bc091</string>
          <string>cb5cbac4-c3f6-4f5f-a417-e80103fb2b62</string>
          <string>157efdf9-3402-491b-92b1-5929bc4e787f</string>
          <string>b8d58010-6982-47d8-9253-365ac4fd03d1</string>
          <string>6540dd0b-572f-471b-bfcb-6288a38191ac</string>
          <string>919a4220-394f-48ea-92f8-841afc86ce3e</string>
          <string>6978b08f-7b35-419c-806c-40ab88352adc</string>
          <string>96ed09ab-0af2-4414-85e0-61629d76085b</string>
          <string>f2075620-e011-4280-bbd2-33986a15313a</string>
          <string>a25c03d6-3b28-495b-a3ed-0015c923e19f</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>2f7e3c54-1320-4ed1-9d75-a9af7d7e99da</string>
          <string>daeb0a8a-bce8-4114-8748-41e61d0f5da1</string>
          <string>80804528-767e-4972-ac58-ab532e1986bc</string>
          <string>752dbe9d-ba15-422b-8a3e-2bff57ad6a78</string>
          <string>7db1559f-6ca5-464a-954c-6eb8a0e7656c</string>
          <string>98d6e634-66b1-45ca-b5c6-a9d1a7b82c1a</string>
          <string>f06b628e-0b68-4cb3-9eea-cb7788d0a8ef</string>
          <string>938511aa-2277-493f-9014-f568bb361f64</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.9.0">
            <id>d8e6f7a5-aeec-4025-a6d2-e568eb48e647</id>
            <name>Convert Date</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182168</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Supports parsing date strings in a variety of formats and outputting the date in a specific format.
*/
var patterns = [
	&quot;yyyy-MM-dd HH:mm:ss.SSSSSSS ZZ&quot;,
	&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZ&quot;,
	&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;,
	&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;,
	&quot;yyyy-MM-dd&apos;T&apos;HH:mm&quot;,
	&apos;yyyy-MM-dd&apos;,
	&apos;yyyy-MM-dd HH:mm:ss:SSS&apos;,
	&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;,
	&apos;yyyy-MM-dd HH:mm:ss&apos;,
	&apos;yyyy-MM-dd HH:mm&apos;,
	&apos;EEE MMM dd HH:mm:ss:SSS zzz yyyy&apos;,
	&apos;EEE MMM dd HH:mm:ss.SSS zzz yyyy&apos;,
	&apos;EEE MMM dd HH:mm:ss zzz yyyy&apos;,
	&apos;EEE MMM dd zzz yyyy&apos;,
	&apos;dd-MMM-yyyy HH:mm:ss:SSS&apos;,
	&apos;dd-MMM-yyyy HH:mm:ss.SSS&apos;,
	&apos;dd-MMM-yyyy HH:mm:ss&apos;,
	&apos;yyyy MM dd&apos;,
	&apos;yyyy.MM.dd&apos;,
	&apos;MM-dd-yyyy&apos;,
	&apos;MM dd yyyy&apos;,
	&apos;MM.dd.yyyy&apos;,
	&apos;HH:mm:ss:SSS&apos;,
	&apos;HH:mm:ss.SSS&apos;,
	&apos;HH:mm:ss&apos;,
	&apos;yyyyMMddHHmmssSSS&apos;,
	&apos;yyyyMMddHHmmss&apos;,
	&apos;yyyyMMddHHmm&apos;,
	&apos;hh:mm aa&apos;,
	&apos;MM/dd/yy&apos;,
	&apos;MM/dd/yyyy&apos;];

var formatters = [];
for each (pattern in patterns) {
	formatters.push(org.joda.time.format.DateTimeFormat.forPattern(pattern).withPivotYear(2000));
}

function getMillis(date) {
	var instant = 0;
	if (typeof date == &apos;number&apos; || date instanceof java.lang.Number)
		instant = new Number(date);
	else if (date instanceof Date || date instanceof java.util.Date)
		instant = date.getTime();
	else if (date instanceof org.joda.time.ReadableInstant)
		instant = date.getMillis();
	else {
		for each (formatter in formatters) {
			try {
				instant = formatter.parseMillis(new String(date));
				break;
			} catch(e) {}
		}
	}

	return instant;
}

function getDate(date) {
	return new java.util.Date(getMillis(date));
}

function convertDate(date, outpattern) {
	return org.joda.time.format.DateTimeFormat.forPattern(outpattern).print(getMillis(date));
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>0e158aa1-77ee-465c-bb7a-13f4c8ecda13</id>
            <name>Create FHIR OperationOutcome</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182327</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Creates a FHIR OperationOutcome resource and adds it to the response map with the key &quot;response&quot;.

    @param {String} severity - Indicates whether the issue indicates a variation from successful
        processing. Values: fatal | error | warning | information
    @param {String} code - Describes the type of the issue. The system that creates an
        OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may
        additional provide its own code for the error in the details element. Values: invalid | security |
        processing | transient | informational
    @param {String} details - Additional details about the error. This may be a text description of
        the error, or a system code that identifies the error.
    @param {String} fhirVersion - The FHIR version of the OperationOutcome resource. Values: DSTU2 | DSTU2_1 | 
    	   DSTU_HL7ORG | STU3 | R4 | R5
    @param {int} httpStatusCode - The HTTP status code to send back with the response. Defaults to 400
        if not specified.
    @param {Error} e - If included, this will be used to build up the response status message and
        error.
    @param {Boolean} isFormatXML - If true, the resource will be formatted in XML. Otherwise, it will
        be formatted in JSON. If not specified, it will attempt to find the _format parameter in the source
        map, or return JSON.
    @return {Response} The created Response object.
*/
function createOperationOutcome(severity, code, details, fhirVersion, httpStatusCode, e, isFormatXML) {
    if (!httpStatusCode) {
        httpStatusCode = 400;
    }

    if (!isFormatXML &amp;&amp; $s(&apos;parameters&apos;) &amp;&amp; $s(&apos;parameters&apos;).contains(&apos;_format&apos;)) {
        isFormatXML = !FhirUtil.isJSON($s(&apos;parameters&apos;).getParameter(&apos;_format&apos;));
    }

    var outcome = FhirUtil.createOperationOutcome(severity, code, details, fhirVersion);
    var message = isFormatXML ? FhirUtil.toXML(outcome, fhirVersion) : FhirUtil.toJSON(outcome, fhirVersion);
    responseMap.put(&apos;response&apos;, FhirResponseFactory.getResponse(message, httpStatusCode, isFormatXML ? FhirUtil.getMIMETypeXML() : FhirUtil.getMIMETypeJSON()));
    var response = new Response(message);
    response.setStatusMessage(severity.toUpperCase() + &apos; OperationOutcome created with status &apos; + httpStatusCode + &apos;.&apos;);

    if (httpStatusCode &gt;= 400) {
        response.setStatus(Status.ERROR);

        if (e) {
            var customMessage = &apos;Channel &apos; + channelName + &apos;: &apos;;
            if (e.rhinoException) {
                customMessage += &apos;Error on line &apos; + e.rhinoException.lineNumber() + &apos;: &apos;;
            }
            customMessage += e.toString();
    
            var errorContent = com.mirth.connect.util.ErrorMessageBuilder.buildErrorMessage(&apos;FHIR Listener&apos;, customMessage, e.javaException || null);
            if (e.javaException) {
                logger.error(errorContent, e.javaException);    
            } else {
                logger.error(errorContent);
            }
            response.setError(errorContent);
        }
    }

    return response;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>a9691b6e-b455-4789-b4d7-89bcc095a163</id>
            <name>Get Prefer Header Value</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182213</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns the &quot;return&quot; element of the Prefer HTTP header if specified.

	@return {String} The &quot;return&quot; element of the Prefer header, or undefined if not present
*/
function getPreferValue() {
	var preferReturn;
	var preferHeader = $(&apos;headers&apos;).getHeader(&apos;Prefer&apos;);
	
	if (preferHeader) {
		for each (element in new org.apache.http.message.BasicHeader(&apos;Prefer&apos;, preferHeader).getElements()) {
			if (element.getName() == &apos;return&apos;) {
				preferReturn = element.getValue();
				break;
			}
		}
	}
	
	return preferReturn;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>18c799ae-3553-40b0-b8cc-8898fbad5f7d</id>
            <name>Import Common Packages</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182039</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>COMPILED_CODE</type>
              <code>/**
	Imports HAPI FHIR packages commonly used in the FHIR Listener channel.
*/
importPackage(Packages.ca.uhn.fhir.model.api);
importPackage(Packages.ca.uhn.fhir.model.base.resource);
importPackage(Packages.ca.uhn.fhir.model.primitive);
importPackage(Packages.org.hl7.fhir.r4.model);
importPackage(org.apache.commons.lang3);
importPackage(org.apache.commons.lang3.math);</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.0">
            <id>ece0b77f-a9bc-43f1-ae57-96bb3a1b4143</id>
            <name>Update Resource Meta</name>
            <revision>1</revision>
            <lastModified>
              <time>1592591182144</time>
              <timezone>UTC</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Sets the resource ID, version ID, and last updated date/time.

	@param {IBaseResource} resource - The FHIR resource object.
	@param {String} id - The logical ID of the resource.
	@param {Number} versionId - The version ID of the resource.
	@return {Date} The last updated date/time.
*/
function updateResourceMeta(resource, id, versionId) {
	resource.setId(id);
	resource.getMeta().setVersionId(new String(versionId));
	var lastUpdated = new java.util.Date();
	resource.getMeta().getLastUpdatedElement().setTimeZone(java.util.TimeZone.getDefault());
	resource.getMeta().setLastUpdated(lastUpdated);
	return lastUpdated;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
    <channelTags>
      <channelTag>
        <id>801da78a-5e23-458c-8771-2012cc1238f6</id>
        <name>FHIR</name>
        <channelIds>
          <string>11b8bb4e-6a05-481c-ad7e-e2026c062daa</string>
          <string>b7ea555f-67e8-4380-8d67-ddbca4db628e</string>
          <string>c57fce23-dc30-4095-8040-72c0e83dce8d</string>
          <string>fbd897e1-b661-490a-b546-275f48e43f7d</string>
          <string>23e68077-7c1c-4638-b5b5-9d029cef6163</string>
          <string>e99f4297-62bc-4323-a04d-752cda42e659</string>
          <string>938511aa-2277-493f-9014-f568bb361f64</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>2f7e3c54-1320-4ed1-9d75-a9af7d7e99da</string>
          <string>b8d58010-6982-47d8-9253-365ac4fd03d1</string>
          <string>6540dd0b-572f-471b-bfcb-6288a38191ac</string>
          <string>752dbe9d-ba15-422b-8a3e-2bff57ad6a78</string>
          <string>919a4220-394f-48ea-92f8-841afc86ce3e</string>
          <string>7db1559f-6ca5-464a-954c-6eb8a0e7656c</string>
          <string>6978b08f-7b35-419c-806c-40ab88352adc</string>
          <string>96ed09ab-0af2-4414-85e0-61629d76085b</string>
          <string>f2075620-e011-4280-bbd2-33986a15313a</string>
          <string>6ee5452f-792a-4f77-aada-4bca1de14b07</string>
          <string>32e8a925-b0de-440d-9d5c-77265106de8f</string>
          <string>f6710348-d553-4c88-ab71-41a88e929e4d</string>
          <string>50ead7ad-6d84-4217-a22b-0902c08bc091</string>
          <string>cb5cbac4-c3f6-4f5f-a417-e80103fb2b62</string>
          <string>157efdf9-3402-491b-92b1-5929bc4e787f</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>f06b628e-0b68-4cb3-9eea-cb7788d0a8ef</string>
          <string>a25c03d6-3b28-495b-a3ed-0015c923e19f</string>
        </channelIds>
        <backgroundColor>
          <red>255</red>
          <green>0</green>
          <blue>0</blue>
          <alpha>255</alpha>
        </backgroundColor>
      </channelTag>
    </channelTags>
  </exportData>
</channel>